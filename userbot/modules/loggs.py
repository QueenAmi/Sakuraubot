
__MODULE__ = " ü·¥è…¢s"
__HELP__ = """
<blockquote><b> ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã …¢ Ä·¥è·¥ú·¥ò  ü·¥è…¢s

‚û¢ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú: <code>{0}logger</code> [·¥è…¥/·¥è“ì“ì]
‚û¢ ·¥ò·¥á…¥·¥ä·¥á ü·¥Äs·¥Ä…¥: ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥ ·¥Ä·¥õ·¥Ä·¥ú ·¥ç·¥á…¥·¥è…¥·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥ …¢ Ä·¥ú·¥ò  ü·¥è…¢.

‚û¢ : <code>{0}logger on</code> ‚ûõ  ·¥ç·¥á…¥…¢·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥ …¢ Ä·¥ú·¥ò  ü·¥è…¢.
‚û¢ : <code>{0}logger off</code> ‚ûõ  ·¥ç·¥á…¥·¥è…¥·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥ …¢ Ä·¥ú·¥ò  ü·¥è…¢.<b></blockquote>
"""



import asyncio
from pyrogram.enums import *
from pyrogram.errors import FloodWait
from pyrogram.types import *
from userbot import *


async def create_botlog(client):
    name = "RynUbot Logs"
    desc = "‚ùí ·¥ä·¥Ä…¥…¢·¥Ä…¥ ·¥ã·¥á ü·¥ú·¥Ä Ä ·¥Ö·¥Ä Ä…™ …¢ Ä·¥ú·¥ò  ü·¥è…¢ …™…¥…™\n‚îî ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è: @{bot.me.mention}"
    group = await client.create_supergroup(name, desc)
    nt = wget.download("https://telegra.ph/file/65bb7e66f28f7d249aaf3.jpg")
    photo_video = {"video": nt} if nt.endswith(".mp4") else {"photo": nt}
    kntl = group.id
    await client.set_chat_photo(kntl, **photo_video)
    await client.send_message(
        kntl,
        f"<blockquote><b>**‚ùí …¢ Ä·¥è·¥ú·¥ò  ü·¥è…¢s  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™ ô·¥ú·¥Ä·¥õ\n‚îî ·¥ã·¥Ä·¥ç·¥ú ·¥ã·¥á ü·¥ú·¥Ä Ä ·¥Ö·¥Ä Ä…™ s…™…¥…™ ·¥Ä·¥ã·¥ú ·¥Ñ·¥Ä ô·¥ú ü…™…¥  Ä·¥Ä·¥ç·¥áùü∏!!!**<b></blockquote>",
    )
    return kntl
   

@CB.UBOT("LOGS_GROUP", ubot)
async def _(client, message):
    log = await get_vars(client.me.id, "TAG_LOG")
    if not log:
        return
    if message.chat.id == 777000:
        return
    from_user = (
        message.chat if message.chat.type == ChatType.PRIVATE else message.from_user
    )
    if message.sender_chat:
        if message.sender_chat.username is None:
            user_link = f"{message.sender_chat.title}"
        else:
            user_link = f"[{message.sender_chat.title}](https://t.me/{message.sender_chat.username}"
    else:
        user_link = f"[{message.from_user.first_name} {message.from_user.last_name or ''}](tg://user?id={message.from_user.id})"
    message_link = (
        message.link
        if message.chat.type in (ChatType.GROUP, ChatType.SUPERGROUP)
        else f"tg://openmessage?user_id={from_user.id}&message_id={message.id}"
    )
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        text = f"""
üì® <b><u>Group Notifications</u></b>

‚Ä¢ <b>Name Group: {message.chat.title}</b>
‚Ä¢ <b>ID Group:</b> <code>{message.chat.id}</code>
‚Ä¢ <b>From: {user_link}</b>
‚Ä¢ <b>Message:</b> <blockquote>{message.text}</blockquote>
‚Ä¢ <b>Link Message: [Here]({message_link}) </blockquote>
"""
        try:
            await asyncio.sleep(0.5)
            return await client.send_message(
                int(log), text, disable_web_page_preview=True
            )
        except ChatForwardsRestricted:
            return f"Error ChatForwardsRestricted {message.chat.id}"
        except MessageIdInvalid:
            return f"Error MessageIdInvalid {message.chat.id}"
        except ChannelPrivate:
            return f"Error ChannelPrivate {message.chat.id}"
        except FloodWait as e:
            await asyncio.sleep(e.value)
            return await client.send_message(
                int(log), text, disable_web_page_preview=True
            )
    else:
        text = f"""
üì® <b><u>Private Notifications</u></b>

‚Ä¢ <b>From: {user_link}</b>
‚Ä¢ <b>Message:</b> <blockquote>{message.text}</blockquote>
‚Ä¢ <b>Link Message: [Here]({message_link}) </b>
"""
        try:
            await asyncio.sleep(0.5)
            await client.send_message(int(log), text, disable_web_page_preview=True)
            return await message.forward(int(log))
        except (ChatForwardsRestricted, MessageIdInvalid, ChatWriteForbidden):
            pass
        except FloodWait as e:
            await asyncio.sleep(e.value)
            await client.send_message(int(log), text, disable_web_page_preview=True)
            return await message.forward(int(log))


@CB.UBOT("logger")
async def _(client, message):
    xx = await message.reply(f" ô·¥á…¥·¥õ·¥Ä Ä …¢·¥ú·¥Ä  ô·¥ú·¥Ä·¥õ…™…¥ ·¥Ö·¥ú ü·¥ú  ü·¥è…¢s…¥ è·¥Ä...")
    cek = get_arg(message)
    logs = await get_vars(client.me.id, "TAG_LOG")
    if cek.lower() == "on":
        if logs is None:
            ajg = await create_botlog(client)
            babi = await client.export_chat_invite_link(int(ajg))
            await set_vars(client.me.id, "TAG_LOG", int(ajg))
            return await xx.edit(f" ü·¥è…¢s …¢ Ä·¥è·¥ú·¥ò  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥:\n\n{babi}")
        else:
            return await xx.edit(f" ü·¥è…¢s …¢ Ä·¥è·¥ú·¥ò ·¥Ä…¥·¥Ö·¥Ä s·¥ú·¥Ö·¥Ä ú ·¥Ä·¥ã·¥õ…™“ì.")
    if cek.lower() == "off":
        if logs is not None:
            await client.delete_supergroup(int(logs))
            await remove_vars(client.me.id, "TAG_LOG")
            return await xx.edit(f" ü·¥è…¢s …¢ Ä·¥è·¥ú·¥òs  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™…¥·¥è…¥·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥.\n\n{babi}")
        else:
            return await xx.edit(f" ü·¥è…¢s …¢ Ä·¥è·¥ú·¥òs ·¥Ä…¥·¥Ö·¥Ä s·¥ú·¥Ö·¥Ä ú ·¥Ö…™…¥·¥è…¥·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥.")
    else:
        return await xx.edit(
            f"“ì·¥è Ä·¥ç·¥Ä·¥õ  è·¥Ä…¥…¢ ·¥Ä…¥·¥Ö·¥Ä  ô·¥á Ä…™·¥ã·¥Ä…¥ s·¥Ä ü·¥Ä ú. s…™ ü·¥Ä ú·¥ã·¥Ä…¥ …¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ <code>{message.text} on/off</code>"
        )
